{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../lib/rehype-component.ts", "../../../lib/rehype-npm-command.ts"],
  "sourcesContent": ["import fs from \"fs\"\nimport path from \"path\"\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\"\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport { codeImport } from \"remark-code-import\"\nimport remarkGfm from \"remark-gfm\"\nimport { getHighlighter, loadTheme } from \"shiki\"\nimport { visit } from \"unist-util-visit\"\n\nimport { rehypeComponent } from \"./lib/rehype-component\"\nimport { rehypeNpmCommand } from \"./lib/rehype-npm-command\"\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n}\n\nexport const Page = defineDocumentType(() => ({\n  name: \"Page\",\n  filePathPattern: `pages/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n  },\n  computedFields,\n}))\n\nexport const Work = defineDocumentType(() => ({\n  name: \"Work\",\n  filePathPattern: `works/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    thumbnail: {\n      type: \"string\",\n      required: true,\n    },\n    cover: {\n      type: \"string\",\n    },\n    date: {\n      type: \"string\",\n      required: true,\n    },\n    featured: {\n      type: \"boolean\",\n      default: false,\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n  },\n  computedFields,\n}))\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    thumbnail: {\n      type: \"string\",\n      required: true,\n    },\n    link: {\n      type: \"string\",\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n    },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Post, Page, Work],\n  mdx: {\n    remarkPlugins: [remarkGfm, codeImport],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeComponent,\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children\n            if (codeEl.tagName !== \"code\") {\n              return\n            }\n\n            if (codeEl.data?.meta) {\n              // Extract event from meta and pass it down the tree.\n              const regex = /event=\"([^\"]*)\"/\n              const match = codeEl.data?.meta.match(regex)\n              if (match) {\n                node.__event__ = match ? match[1] : null\n                codeEl.data.meta = codeEl.data.meta.replace(regex, \"\")\n              }\n            }\n\n            node.__rawString__ = codeEl.children?.[0].value\n            node.__src__ = node.properties?.__src__\n          }\n        })\n      },\n      [\n        rehypePrettyCode,\n        {\n          theme: {\n            dark: JSON.parse(\n              fs.readFileSync(path.resolve(\"./lib/themes/dark.json\"), \"utf-8\")\n            ),\n            light: JSON.parse(\n              fs.readFileSync(path.resolve(\"./lib/themes/light.json\"), \"utf-8\")\n            ),\n          },\n          // getHighlighter: async () => {\n          //   const theme = await loadTheme(\n          //     path.join(process.cwd(), \"lib/vscode-theme.json\")\n          //   )\n          //   return await getHighlighter({ theme })\n          // },\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }]\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push(\"line--highlighted\")\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = [\"word--highlighted\"]\n          },\n        },\n      ],\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"div\") {\n            if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n              return\n            }\n\n            const preElement = node.children.at(-1)\n            if (preElement.tagName !== \"pre\") {\n              return\n            }\n\n            preElement.properties[\"__withMeta__\"] =\n              node.children.at(0).tagName === \"div\"\n            preElement.properties[\"__rawString__\"] = node.__rawString__\n\n            if (node.__src__) {\n              preElement.properties[\"__src__\"] = node.__src__\n            }\n\n            if (node.__event__) {\n              preElement.properties[\"__event__\"] = node.__event__\n            }\n          }\n        })\n      },\n      rehypeNpmCommand,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n})\n", "import fs from \"fs\"\nimport path from \"path\"\nimport { UnistNode, UnistTree } from \"types/unist\"\nimport { u } from \"unist-builder\"\nimport { visit } from \"unist-util-visit\"\n\nexport function rehypeComponent() {\n  return async (tree: UnistTree) => {\n    // @ts-ignore next-line\n    visit(tree, (node: UnistNode) => {\n      const { value: src } = getNodeAttributeByName(node, \"src\") || {}\n\n      if (node.name === \"ComponentExample\") {\n        const source = getComponentSourceFileContent(node)\n        if (!source) {\n          return\n        }\n\n        // Replace the Example component with a pre element.\n        node.children?.push(\n          u(\"element\", {\n            tagName: \"pre\",\n            properties: {\n              __src__: src,\n            },\n            children: [\n              u(\"element\", {\n                tagName: \"code\",\n                properties: {\n                  className: [\"language-tsx\"],\n                },\n                children: [\n                  {\n                    type: \"text\",\n                    value: source,\n                  },\n                ],\n              }),\n            ],\n          })\n        )\n\n        const extractClassname = getNodeAttributeByName(\n          node,\n          \"extractClassname\"\n        )\n        if (\n          extractClassname &&\n          typeof extractClassname.value !== \"undefined\" &&\n          extractClassname.value !== \"false\"\n        ) {\n          // Extract className from string\n          // TODO: Use @swc/core and a visitor to extract this.\n          // For now, a simple regex should do.\n          const values = source.match(/className=\"(.*)\"/)\n          const className = values ? values[1] : \"\"\n\n          // Add the className as a jsx prop so we can pass it to the copy button.\n          node.attributes?.push({\n            name: \"extractedClassNames\",\n            type: \"mdxJsxAttribute\",\n            value: className,\n          })\n\n          // Add a pre element with the className only.\n          node.children?.push(\n            u(\"element\", {\n              tagName: \"pre\",\n              properties: {},\n              children: [\n                u(\"element\", {\n                  tagName: \"code\",\n                  properties: {\n                    className: [\"language-tsx\"],\n                  },\n                  children: [\n                    {\n                      type: \"text\",\n                      value: className,\n                    },\n                  ],\n                }),\n              ],\n            })\n          )\n        }\n      }\n\n      if (node.name === \"ComponentSource\") {\n        const source = getComponentSourceFileContent(node)\n        if (!source) {\n          return\n        }\n\n        // Replace the Source component with a pre element.\n        node.children?.push(\n          u(\"element\", {\n            tagName: \"pre\",\n            properties: {\n              __src__: src,\n            },\n            children: [\n              u(\"element\", {\n                tagName: \"code\",\n                properties: {\n                  className: [\"language-tsx\"],\n                },\n                children: [\n                  {\n                    type: \"text\",\n                    value: source,\n                  },\n                ],\n              }),\n            ],\n          })\n        )\n      }\n    })\n  }\n}\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes?.find((attribute) => attribute.name === name)\n}\n\nfunction getComponentSourceFileContent(node: UnistNode) {\n  const src = getNodeAttributeByName(node, \"src\")?.value as string\n\n  if (!src) {\n    return null\n  }\n\n  // Read the source file.\n  const filePath = path.join(process.cwd(), src)\n  const source = fs.readFileSync(filePath, \"utf8\")\n\n  return source\n}\n", "import { UnistNode, UnistTree } from \"types/unist\"\nimport { visit } from \"unist-util-visit\"\n\nexport function rehypeNpmCommand() {\n  return (tree: UnistTree) => {\n    // @ts-ignore next-line\n    visit(tree, (node: UnistNode) => {\n      if (node.type !== \"element\" || node?.tagName !== \"pre\") {\n        return\n      }\n\n      // npm install.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npm install\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"yarn add\"\n        )\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npm install\",\n          \"pnpm add\"\n        )\n      }\n\n      // npx create.\n      if (node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"yarn create \"\n        )\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\n          \"npx create-\",\n          \"pnpm create \"\n        )\n      }\n\n      // npx.\n      if (\n        node.properties?.[\"__rawString__\"]?.startsWith(\"npx\") &&\n        !node.properties?.[\"__rawString__\"]?.startsWith(\"npx create-\")\n      ) {\n        const npmCommand = node.properties?.[\"__rawString__\"]\n        node.properties[\"__npmCommand__\"] = npmCommand\n        node.properties[\"__yarnCommand__\"] = npmCommand\n        node.properties[\"__pnpmCommand__\"] = npmCommand.replace(\"npx\", \"pnpx\")\n      }\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": ["fs", "path", "visit", "visit", "visit", "fs", "path"]
}
